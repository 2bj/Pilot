{"Pilot":{"label":"Pilot","class":"Pilot","descr":"Многофункциональный JavaScript router, решает проблему маршрутизации вашего приложения,\nобеспечивая полный контроль над маршрутом. Может работать как сам по себе, так и другими framework'ами,\nнапример Backbone, где он станет прекрасной заменой стандартным Router и даже View, просто попробуйте.","props":{"history":{"name":"history","type":"Array","label":"Pilot.history","descr":"История навигации, поведение аналогично `window.history`.","code":{"type":"js","source":"var Ace = new Pilot;\n\nAce.nav('/airport/');\nAce.nav('/airport/depot/');\n// etc\n\nconsole.log(Ace.history);\n// [\"http://site.com/airport/\", \"http://site.com/airport/depot/\", ..]"}}},"fn":{"constructor":{"name":"constructor","label":"Pilot.constructor","args":{"options":"объект параметров, см. пример"},"variants":[{"args":[{"name":"options","type":"Object","optional":true}],"descr":""}],"returns":"void","code":{"type":"js","source":"var Ivan = new Pilot({\n    el: null // контейнер, с которого нужно перехватывать клики\n  , production: false  // нужен для отключения логирования и вывода ошибок\n});"}},"getUrl":{"name":"getUrl","label":"Pilot.getUrl","args":{"id":"уникальный идентификатор маршрута","params":"параметры, которые будут использованы при построении url","extra":"дополнительные параметры"},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":false},{"name":"extra","type":"Object","optional":true}],"descr":"Получить url, по id маршрута. Чтобы не зашивать ссылки внутри, вы можете использовать данный метода,\nкоторый по id маршрута и параметрам, собирает готовый url."}],"returns":"String","code":{"type":"js","source":"var Ivan = new Pilot;\n\n// Add route\nIvan.route('address', '/:city/(street/:id/)', function (evt, req){ });\n\nIvan.getUrl('address'); // return \"/\"\nIvan.getUrl('address', { city: 'berlin' }); // \"/berlin/\"\nIvan.getUrl('address', { city: 'berlin', id: 123 }); // \"/berlin/street/10/\""}},"go":{"name":"go","label":"Pilot.go","args":{"id":"уникальный идентификатор маршрута","params":"параметры, которые будут использоваться для построения url"},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":true}],"descr":"Навигация по id маршрута. Часто нужно не только понять, как переместился пользователь,\nно и в зависимости от его действий перейти на нужный url, этот метод позволяет сменить маршрут,\nоперируя только его id и параметрами."}],"returns":"jQuery.Deffered","code":{"type":"js","source":"var Ivan = new Pilot;\n\nIvan.route('coordinates', '/coordinates/:lat/:long', function (evt, req){ });\n\nIvan.go('coordinates', { lat: 16 }); // location: \"/coordinates/16/\"\nIvan.go('coordinates', { lat: 16, long: 178 }); // location: \"/coordinates/16/178/\""}},"nav":{"name":"nav","label":"Pilot.nav","args":{"url":"относительный или абсолютный url","force":"все равно перейти на нужный урл, даже если мы уже там"},"variants":[{"args":[{"name":"url","type":"String","optional":false},{"name":"force","type":"Boolean","optional":true}],"descr":"Навигация по url. Вызывая этот метод, роутер найдет все обработчики, для данного\nмаршрута и перейдет на него. Если url не изменился, то переход выполнен не будет,\nно это можно обойти, используй параметр `force`."}],"returns":"jQuery.Deffered","code":{"type":"js","source":"var Ivan = new Pilot\n            .on('beforeroute', function (req){  })\n            .on('route', function (req){  })\n            .on('404', function (req){ console.log('Route not found'); })\n            .route('/base/moscow/', function (evt, req){\n            \tconsole.log('Greetings from Moscow');\n            })\n;\n\nIvan.nav('/base/moscow/'); // \"Greetings from Moscow\"\nIvan.nav('/base/moon/'); // \"Route not found\""}},"start":{"name":"start","label":"Pilot.start","args":{"url":"начальная \"точка\" маршрутизации"},"variants":[{"args":[{"name":"url","type":"String","optional":true}],"descr":"Запустить роутер. Если вызывать без параметров, начальный url будет получен через `Pilot.getLocation`."}],"returns":"void"},"route":{"name":"route","label":"Pilot.route:simple","args":{"pattern":"будет использован, для сопоставления с запросом при навигации","handler":"будет вызван с двумя параметрами event и request, если pattern подошел к url","withEndEvent":"вызывать `handler` при завершении маршрута","id":"уникальный идентификатор маршрута","ctrl":"методы котроллера или наследник `Pilot.Route`","options":"будут переданным при инстанцировании контроллера"},"variants":[{"args":[{"name":"pattern","type":"String","optional":false},{"name":"handler","type":"Function","optional":false},{"name":"withEndEvent","type":"Boolean","optional":true}],"descr":"Простой способ добавления маршрута."},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false},{"name":"handler","type":"Function","optional":false},{"name":"withEndEvent","type":"Boolean","optional":true}],"descr":"Простой способ добавления именного маршрута."},{"args":[{"name":"pattern","type":"String","optional":false},{"name":"ctrl","type":"Object|Pilot.Route","optional":false}],"descr":"Добавить контроллер маршрута. Контроллер маршрута — это уже серьезно, с помощью его можно\nсообщить роутеру (передав Deffered), что сначала нужно дождаться получения данных и только потом, осуществить\nпереход на маршрут. Такой подход хорош в сочетании с множественными контроллерами на один маршрут,\nгде каждый выполняет свою маленькую задачу, например один получает баннер, другой список постов, а третий\nпрофиль юзера."},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false},{"name":"ctrl","type":"Object|Pilot.Route","optional":false}],"descr":"Добавить именнованный контроллер маршрута."}],"returns":"Pilot","code":{"type":"js","source":"var airport = Pilot.Route.extend({\n    onRoute: function (){\n        console.log('base:', this.getData().name);\n    }\n});\n\nIvan\n    .route('/base/1', airport, { data: { name: 'Moscow' } })\n    .route('/base/2', airport, { data: { name: 'Yaroslavl' } })\n;\n\nIvan.nav('/base/1'); // \"base: Moscow\"\nIvan.nav('/base/2'); // \"base: Yaroslavl\""}},"createGroup":{"name":"createGroup","label":"Pilot.createGroup","args":{"pattern":"базавый паттерн","id":"уникальный идентификатор маршрута"},"variants":[{"args":[{"name":"pattern","type":"String","optional":false}],"descr":"Создайте группу и назначайте маршруты относительно её."},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false}],"descr":"Созданние именнованной группы"}],"returns":"Pilot","code":{"type":"js","source":"var Ivan = new Pilot;\n            .createGroup('/base/')\n                .route('.', function (evt, req){ console.log('def'); })\n                .route(':id', function (evt, req){\n                \tconsole.log('base: '+.req.params.id);\n                })\n                .closeGroup()\n;\n\nIvan.nav('/base/'); // \"def\"\nIvan.nav('/base/123/'); // \"base: 123\""}},"closeGroup":{"name":"closeGroup","label":"Pilot.closeGroup","args":{},"variants":[{"args":0,"descr":"Закрыть группу и вернуть предыдущую, либо сам роутер"}],"returns":"Pilot"},"on":{"name":"on","label":"Pilot.on","args":{"events":"одно или несколько событий, можно использовать namespace","fn":"функция обработчик"},"variants":[{"args":[{"name":"events","type":"String","optional":false},{"name":"fn","type":"Function","optional":false}],"descr":"Добавить обработчик одиного или нескольких событий.\nУ Pilot есть четыре события: `beforeroute`, `route`, `404` и `error`"}],"returns":"Pilot","code":{"type":"js","source":"new Pilot\n\t.on('beforeroute', function (evt/**$.Event*/, req/**Object*/){ })\n\t.on('route', function (evt/**$.Event*/, req/**Object*/){ })\n\t.on('404', function (evt/**$.Event*/, req/**Object*/){ })\n\t.on('error', function (evt/**$.Event*/, err/**Error*/){ })\n;"}},"off":{"name":"off","label":"Pilot.off","args":{"events":"одно или несколько событий, можно использовать namespace","fn":"функция обработчик"},"variants":[{"args":[{"name":"events","type":"String","optional":false},{"name":"fn","type":"Function","optional":false}],"descr":"Снять обработчик события."}],"returns":"Pilot","code":{"type":"js","source":"new Pilot\n\t// Подписываемся\n\t.on('route.one', function (evt/**$.Event*/, req/**Object*/){\n\t\t// Отписываемся используя namespace\n\t\tthis.off('.one');\n\t})\n;"}},"emit":{"name":"emit","label":"Pilot.emit","args":{"event":"название события","args":"дополнительные аргументы"},"variants":[{"args":[{"name":"event","type":"String","optional":false},{"name":"args","type":"Array","optional":true}],"descr":"Испустить событие."}],"returns":"Pilot","code":{"type":"js","source":"var Ace = new Pilot\n\t.on('custom', function (evt/**$.Event*/, foo/**String*/){  })\n;\n\n\n// Испускаем событие\nAce.emit('custom', [\"foo\"]);"}},"hasBack":{"name":"hasBack","label":"Pilot.hasBack","args":{},"variants":[{"args":0,"descr":"Проверка возможности перехода назад по `history`"}],"returns":"Boolean"},"hasForward":{"name":"hasForward","label":"Pilot.hasForward","args":{},"variants":[{"args":0,"descr":"Проверка возможности перехода вперед по `history`"}],"returns":"Boolean"},"back":{"name":"back","label":"Pilot.back","args":{},"variants":[{"args":0,"descr":"Перейти на предыдуший url в `history`"}],"returns":"jQuery.Deffered"},"forward":{"name":"forward","label":"Pilot.forward","args":{},"variants":[{"args":0,"descr":"Перейти на следующий url, относительно текущий позиции в `history`"}],"returns":"jQuery.Deffered"}}},"Pilot.Route":{"label":"Pilot.Route","class":"Pilot.Route","descr":"Класс контроллера маршрута, позволяет не только, контролировать события начала,\nизменения и конца маршрута, но и сообщать роутеру, что перед переходом, на нужный урл\nнужно дождаться собра данных, нужных этому контроллеру.","props":{"@events":{"name":"@events","type":-1,"label":"Pilot.Route.@events","descr":"Доступные события: `routestart`, `routechange` и `routeend`.\nТакже есть событие `route`, соответсвует `routestart` и `routechange`.","code":{"type":"js","source":"var airbase = Pilot.Route.extend({\n\tinit: function (){\n\t\tthis.on('routestart routeend', function (evt/**$.Event*/, req/**Object*/){\n\t\t\t// ...\n\t\t});\n\t},\n\n\tonRoute: function (evt/**$.Event*/, req/**Object*/){\n\t\t// Также можно определить метод с названием события\n\t}\n});"}},"inited":{"name":"inited","type":"Boolean","label":"Pilot.Route.inited","descr":"Флаг инициализации маршрута.","code":{"type":"js","source":"var airbase = Pilot.Route.extend({\n\tloadData: function (){\n\t\tif( !this.inited ){\n\t\t\tthis.setData({ name: 'Ramstein' });\n\t\t}\n\t}\n});"}},"router":{"name":"router","type":"Pilot","label":"Pilot.Route.router","descr":"Ссылка на роутер."},"boundAll":{"name":"boundAll","type":"Array","label":"Pilot.Route.boundAll","descr":"Список методов, которые будут выполняться в контексте этого объекта.\nОчень удобно для функций, которые будут использоваться в качестве обработчиков событий.","code":{"type":"js","source":"var City = Pilot.Route.extend({\n    name: 'Moscow',\n    boundAll: ['matryoshka', 'vodka', 'balalaika'],\n    init: function (){\n        $('#take').click(this.matryoshka);\n        $('#drink').click(this.vodka);\n        $('#play').click(this.balalaika);\n    },\n    matryoshka: function (evt){ console.log(this.city+': take ', evt) },\n    vodka: function (evt){ console.log(this.city+': drink ', evt) },\n    balalaika: function (evt){ console.log(this.city+': play ', evt) },\n});"}}},"fn":{"bound":{"name":"bound","label":"Pilot.Route.bound","args":{"fn":"функция, либо её название в контроллере"},"variants":[{"args":[{"name":"fn","type":"String|Function","optional":false}],"descr":"Связать метод с контекстом контроллера."}],"returns":"Function","code":{"type":"js","source":"var airport = Pilot.View.extend({\n    el: '#airport',\n    init: function (){\n        // Bound function\n        this.$el.on('mouseenter', this.bound(function (evt){\n            this._onHover(evt);\n        }));\n        \n        // Bound by method name\n        this.$el.on('mouseleave', this.bound('_onHover'));\n    },\n    _onHover: function (evt){\n        this.$el.toggleClass('hovered', evt.type == 'mouseenter');\n    }\n});"}},"init":{"name":"init","label":"Pilot.Route.init","args":{},"variants":[{"args":0,"descr":"Это метод рассчитан на переопределение и будет вызван один раз в момент инициализации контроллера.\nПомните, что инициализация не связана созданием инстанса, она происходит при первом вызове контроллера,\nпосле `loadData`, но до события `routestart`."}],"returns":"void","code":{"type":"js","source":"var airport = Pilot.Route.extend({\n    init: function (){\n        this.$el = $('#airport');\n    }\n});"}},"loadData":{"name":"loadData","label":"Pilot.Route.loadData","args":{"req":"объект запроса"},"variants":[{"args":[{"name":"req","type":"Object","optional":false}],"descr":"Метод будет вызван перед событием `routestart`, `routechange`. Если вренуть $.Deffered,\nто роутер дождеться окончания сбора данных контроллера и только потом осуществит навигацию."}],"returns":"jQuery.Deffered|Null","code":{"type":"js","source":"var airport = Pilot.Route.View.extend({\n    loadData: function (req){\n        return $.ajax('/load/data/', req.query, this.bound(function (data){\n            this.setData( data );\n        }));\n    },\n    onRoute: function (){\n        var data = this.getData();\n    }\n});"}},"getUrl":{"name":"getUrl","label":"Pilot.Route.getUrl","args":{"id":"уникальный идентификатор маршрута","params":"параметры, которые будут использованы при построении url","extra":"дополнительные параметры"},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":false},{"name":"extra","type":"Object","optional":true}],"descr":"Получить url, по id маршрута. Чтобы не зашивать ссылки внутри, вы можете использовать данный метода,\nкоторый по id маршрута и параметрам, собирает готовый url."}],"returns":"String"},"getData":{"name":"getData","label":"Pilot.Route.getData","args":{},"variants":[{"args":0,"descr":"Простой метод, для получения данных хранимых контроллером."}],"returns":"Object","code":{"type":"js","source":"var airport = Pilot.Route.extend({\n    data: { name: 'default' }\n});\n\n(new airport).getData().name; // \"default\"\n(new airport({ data: { name: 'NY' } })).getData().name; // \"NY\""}},"setData":{"name":"setData","label":"Pilot.Route.setData","args":{"data":"новые данные","merge":"слить с уже установленными данными"},"variants":[{"args":[{"name":"data","type":"Object","optional":false},{"name":"merge","type":"Boolean","optional":true}],"descr":"Установит данные контроллера, или слить с текущими."}],"returns":"Pilot.Route","code":{"type":"js","source":"var airport = Pilot.Route.extend({\n    data: { name: 'default', city: 'unknown' }\n});\n\n(new airport).setData({ name: 'Foo' }).getData();\n// { name: 'Foo' }\n\n(new airport).setData({ name: 'Foo' }, true).getData();\n// { name: 'Foo', city: 'unknown' }\n\n(new airport).setData({ name: 'Foo', city: 'Bar' }).getData();\n// { name: 'Foo', city: 'Bar' }"}}}},"Pilot.View":{"label":"Pilot.View","class":"Pilot.View","descr":"Наследник Pilot.Route, имплементирует в себе методы для работы с DOM элементами, событиями и шаблонизацией.\nПо умолчанию, `Pilot.View` подписан события `routestart` и `routeend` контролируя видимость\nDOM элемента, связанного с ним, выставляя ему `display: none` или убирая его.","props":{"el":{"name":"el","type":"HTMLElement","label":"Pilot.View.el","descr":"Ссылка на DOM элемент, за которые отвечает вид.","code":{"type":"js","source":"var airport = Pilot.View.extend({\n    el: '#airport-default'\n});\n\n(new airport).el; // HTMLElement: <div id=\"airport-default\">..</div>\n(new airport({ el: '#moscow' })).el; // HTMLElement: <div id=\"moscow\">..</div>"}},"$el":{"name":"$el","type":"jQuery","label":"Pilot.View.$el","descr":"jQuery коллекция, для более удобной работы.","code":{"type":"js","source":"var base = Pilot.View.extend({\n    el: '#moscow'\n});\n\n(new base).el; // jQuery[<div id=\"moscow\">..</div>]\n(new base({ el: '#moon' })).el; // jQuery[<div id=\"moon\">..</div>]"}},"tagName":{"name":"tagName","type":"String","label":"Pilot.View.tagName","descr":"Если указать этот параметр, то при инициализации будет создан этот тег.","code":{"type":"js","source":"var base = Pilot.View.extend({\n    tagName: 'span'\n});\n\n(new base).el; // HTMLElement: <span>..</span>\n(new base).$el.appendTo('body'); // jQuery[<span>..</span>]"}},"tag":{"name":"tag","type":"String","label":"Pilot.View.tag","descr":"Создать тег и вставить его в нужный контейнер.","code":{"type":"js","source":"var base = Pilot.View.extend({\n    tag: '#box span.base.base_military'\n});\n\n(new base).el; // HTMLElement: <span class=\"base base_military\">..</span>"}},"singleton":{"name":"singleton","type":"Boolean","label":"Pilot.View.tag","descr":"","code":{"type":"js","source":"var airbase = Pilot.View.extend({\n\tel: '#aribase',\n\tsigleton: true,\n\tonRouteStart: function (evt, req){\n\t\tconsole.log('start:', req.path);\n\t},\n\tonRouteChange: function (evt, req){\n\t\tconsole.log('change:', req.path);\n\t},\n\tonRouteStart: function (evt, req){\n\t\tconsole.log('end:', req.path);\n\t}\n});\n\nvar Ivan = new Pilot\n\t.route('/sky/foo/', airbase)\n\t.route('/sky/bar/', airbase)\n\t.route('/sky/baz/', function (evt, req){\n\t\tconsole.log('Sky base Baz');\n\t})\n\t.route('/sky/qux/', airbase)\n;\n\nIvan.nav('/sky/foo/'); // \"start: /sky/foo/\"\nIvan.nav('/sky/bar/'); // \"change: /sky/bar/\"\nIvan.nav('/sky/qux/'); // \"change: /sky/qux/\"\nIvan.nav('/sky/baz/'); // \"Sky base Baz\"\n                       // \"end: /sky/baz/\""}},"template":{"name":"template","type":"Fucntion","label":"Pilot.View.template","descr":"Тут может быть любая функция шаблонизации.","code":{"type":"js","source":"var region = Pilot.View.extend({\n    template: function (data/**Object*/){\n    \t/* \"data\" is equal this.getData() */\n    \t// Use any template engine\n    \treturn\txtpl.fetch('templates/region.xtpl', data);\n    }\n});"}}},"fn":{"toggleView":{"name":"toggleView","label":"Pilot.View.toggleView","args":{"state":"true начало маршрута, false - конец"},"variants":[{"args":[{"name":"state","type":"Boolean","optional":false}],"descr":"Это метод вызывается в начале маршрута и конце, переопределив его вы можете изменить способ, которым отображать\nсвязанные элемент, например добавив анимацию."}],"returns":"void","code":{"type":"js","source":"var region = Pilot.View.extend({\n    toggleView: function (state/**Boolean*/){\n    \tthis.$el.animate({ opacity: +state }, 'fast');\n    }\n});"}},"setElement":{"name":"setElement","label":"Pilot.View.setElement","args":{"selector":"строка содержащая jQuery selector или HTMLElement, [detail](http://api.jquery.com/jQuery/)"},"variants":[{"args":[{"name":"selector","type":"jQuerySelector","optional":false}],"descr":"Установить элемент, с которым работает вид, автоматически меняет свойства `this.el` и `this.$el`."}],"returns":"Pilot.View"},"$":{"name":"$","label":"Pilot.View.$","args":{"selector":"строка содержащая jQuery selector или HTMLElement, [detail](http://api.jquery.com/jQuery/)"},"variants":[{"args":[{"name":"selector","type":"jQuerySelector","optional":false}],"descr":"Выбрать элементы внутри вида, равносильно `this.$el.find`, но более удобно."}],"returns":"jQuery"},"getHtml":{"name":"getHtml","label":"Pilot.View.getHtml","args":{"data":"данные для шаблонизации"},"variants":[{"args":[{"name":"data","type":"Object","optional":true}],"descr":"Получить HTML на основе `this.template` и переданных данных, либо данных вида."}],"returns":"String"},"render":{"name":"render","label":"Pilot.View.render","args":{},"variants":[{"args":0,"descr":"Обновляет HTML `this.el`, при помощи `this.getHtml()`"}],"returns":"void","code":{"type":"js","source":"var city = Pilot.View.extend({\n\ttemplateFile: 'city/default.xtpl',\n\ttemplate: function (obj){\n\t\treturn xtpl.fetch(this.templateFile, obj);\n\t},\n\tonRoute: function (){\n\t\tthis.render();\n\t}\n});"}}}},"Pattern-syntax route":{"label":"Pattern-syntax></a>","class":"Pattern-syntax route","descr":"<ul style=\"line-height: 180%\">\n\t<li>`/search/` — строгое соответсвие</li>\n\t<li>`/gallery/:tag/` — параметризованный</li>\n\t<li>`/search/result/:page?` — параметризованный (необязательный)</li>\n\t<li>`/user/:id(\\d+)` — валидация параметров</li>\n\t<li>`/search/(result/:page/)?` — группировка</li>\n</ul>","props":{},"fn":{}},"Request object":{"label":"Request.object","class":"Request object","descr":"route: `/gallery/:tag/:perPage?(/page/:page)?`<br/>\nrequest: `/gallery/cubism/20/page/123?search=text`","props":{"url":{"name":"url","type":"String","label":"Request.object","descr":"Абсолютный url: `http://domain.com/gallery/cubism/20/page/3?search=text`"},"path":{"name":"path","type":"String","label":"Request.object","descr":"Путь, относительно корня сайта: `/gallery/cubism/20/page/3`"},"search":{"name":"search","type":"String","label":"Request.object","descr":"Строка GET-параметров: `?search=text`"},"query":{"name":"query","type":"Object","label":"Request.object","descr":"Объект GET-параметров: `{ search: \"text\" }`"},"params":{"name":"params","type":"Object","label":"Request.object","descr":"Параметры маршрута: `{ tag: \"cubism\", perPage: 20, page: 123 }`"},"referrer":{"name":"referrer","type":"String","label":"Request.object","descr":"Содержит url перыдущего запроса: `http://domain.com/gallery/cubism/20/page/12`"}},"fn":{}},"History API":{"label":"HistoryAPI","class":"History API","descr":"По умолчанию, библиотека не содержит никаких полифилов и расчитывает только на нативную поддержку.","props":{"Pilot.pushState":{"name":"Pilot.pushState","type":"Boolean","label":"Pilot.pushState","descr":"Использовать полноценное History API, иначе `location.hash`.","code":{"type":"js","source":"Pilot.pushState = true;"}}},"fn":{"Pilot.getLocation":{"name":"Pilot.getLocation","label":"Pilot.getLocation","args":{},"variants":[{"args":0,"descr":"Получить текущее положение."}],"returns":"String"},"Pilot.setLocation":{"name":"Pilot.setLocation","label":"Pilot.setLocation","args":{"req":"объект запроса"},"variants":[{"args":[{"name":"req","type":"Object","optional":false}],"descr":"Установить новое положение."}],"returns":"void"}}},"Changelog":{"label":"changelog","class":"Changelog","descr":"","props":{"1.0.0":{"name":"1.0.0","type":-1,"label":"changelog","descr":"First release"}},"fn":{}}}